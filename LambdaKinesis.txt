from __future__ import print_function

import base64
import json
import boto3

print('Loading function')
iot = boto3.client('iot-data',region_name='us-east-1');

def lambda_handler(event, context):

    for record in event['Records']:
          print(record['eventID'])
    #Load the data from Kinesis stream (in json format with u')
    payloadjson = record['kinesis']
    #Load the data as json
    message = json.dumps(payloadjson)
    payloademftextarray = json.loads(message)
    payloademftext = base64.b64decode(payloademftextarray['data'])
    print(payloademftext)
    #Load the Analytic data sent to Kinesis stream from Kinesis Analytic
    sensorarray = json.loads(payloademftext)
    sensorEMFValue = str(sensorarray['HIGHESTEMF'])
    sensorDateTime = sensorarray['DATETIME']
    sensorId = sensorarray['SENSORID']
   
    #Warning levels code here: based on EMF scale -> Slight concern, Concern
    f_highesEMF = sensorarray['HIGHESTEMF']
    if f_highesEMF is None:
        f_highesEMF = 0
    print('f_highesEMF')
    print(f_highesEMF)
    emfThreadshold = 200.00  # define the EMF value which is above the safe level
    
    
    #Do custom processing on the payload here
    if f_highesEMF > emfThreadshold:
        datamessage = {}
        datamessage['alertMessage'] = 'Warning, EMF is overvalue, greater than safe value:' + sensorEMFValue
        datamessage['DateTime'] = sensorDateTime
        datamessage['SENSORID'] = sensorId
        
        print(datamessage)
        response = iot.publish(
                topic='/device/mobile/alert',qos=0,
                payload=json.dumps(datamessage)
        ) 

 ------------------------------------
 -- TESTING
 
 {
  "Records": [
    {
      "eventID": "49546986683135544286507457936321625675700192471156785154",
      "kinesis": {
        "data": "eyJTRU5TT1JJRCI6Im51bGwiLCJEQVRFVElNRSI6IjIwMTctMTEtMTUgMTI6MTk6MDAuMDAwIiwiSElHSEVTVEVNRiI6bnVsbCwiTE9XRVNURU1GIjpudWxsfQ==",
        "approximateArrivalTimestamp": "2012-04-23T18:25:43.511Z"
      }
    }
  ],
  "region": "us-east-1",
  "deliveryStreamArn": "arn:aws:kinesis:EXAMPLE",
  "invocationId": "invocationIdExample"
}

    
